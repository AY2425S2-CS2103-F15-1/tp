@startuml
!include ../style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant "logic:LogicManager" as LogicManager LOGIC_COLOR
participant "addressBookParser:AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":AddCommandParser" as AddCommandParser LOGIC_COLOR
participant "student:Student" as Student LOGIC_COLOR
participant "command:AddCommand" as AddCommand LOGIC_COLOR
participant "commandResult:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "model:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("add ...")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("add ...")
activate AddressBookParser

create AddCommandParser
AddressBookParser -> AddCommandParser : AddCommandParser()
activate AddCommandParser

AddCommandParser --> AddressBookParser
deactivate AddCommandParser

AddressBookParser -> AddCommandParser : parse("<parameters>")
activate AddCommandParser

create Student
AddCommandParser -> Student : Student()
activate Student

Student ->


Student --> AddCommandParser
deactivate Student

create AddCommand
AddCommandParser -> AddCommand
activate AddCommand

AddCommand --> AddCommandParser :
deactivate AddCommand

AddCommandParser --> AddressBookParser : command
deactivate AddCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
AddCommandParser -[hidden]-> AddressBookParser
destroy AddCommandParser

AddressBookParser --> LogicManager : command
deactivate AddressBookParser

LogicManager -> AddCommand : execute(model)
activate AddCommand

AddCommand -> Model : hasStudent(student)
activate Model

Model --> AddCommand
deactivate Model

AddCommand -> Student : getTutorials()
activate Student

Student --> AddCommand
deactivate Student

loop for each tutorial of student to add
    AddCommand -> Model : hasTutorial(tutorial)
    activate Model

    Model --> AddCommand
    deactivate Model
end

AddCommand -> Student : setTutorials(existingTutorials)
activate Student

Student --> AddCommand
deactivate Student

AddCommand -> Model : addStudent(student)
activate Model

Model --> AddCommand
deactivate Model

create CommandResult
AddCommand -> CommandResult : CommandResult()
activate CommandResult

CommandResult --> AddCommand
deactivate CommandResult

AddCommand --> LogicManager : commandResult
deactivate AddCommand

[<--LogicManager
deactivate LogicManager
@enduml
